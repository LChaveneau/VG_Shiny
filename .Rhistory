summary(coutCD)
modele_robust2
coutCD_2 <- lm(log(c_new) ~ log(pLab) + log(pMat) + log(pCap) + log(qOut), data = df)
summary(coutCD_2)
modele <- lm(log(c) ~ log(pLab) + log(pMat) + log(pCap) + log(qOut), data = df)
ma_base$logresid2 <- log(residuals(modele)^2) # on ajoute la variable ln(e^2)
modele <- lm(log(c) ~ log(pLab) + log(pMat) + log(pCap) + log(qOut), data = df)7
df$logresid2 <- log(residuals(modele)^2) # on ajoute la variable ln(e^2)
modeleresid <- lm(data=df,logresid2 ~ log(pLab) + log(pMat) + log(pCap) + log(qOut)) # on les régresse sur les x
df$e2chap <- exp(modeleresid$fitted.values) # on calcule la variance prédite
modele_mcqg <- lm(data=df ,log(c) ~ log(pLab) + log(pMat) + log(pCap) + log(qOut) ,weight=1/e2chap) # on pondère la régression par 1/variance
summary(modele_mcqg)
bptest(modele_mcqg)
bptest(modele_robust3)
bptest(coutCD)
test_heteroscedasticite(coutCD_2)
coutCD <- lm(log(c) ~ log(pLab) + log(pMat) + log(pCap) + log(qOut), data = df)
## Test 1
distBCMod <- caret::BoxCoxTrans(df$c)
print(distBCMod)
df <- cbind(df, c_new=predict(distBCMod, df$c))
coutCD_2 <- lm(log(c_new) ~ log(pLab) + log(pMat) + log(pCap) + log(qOut), data = df)
summary(coutCD_2)
test_heteroscedasticite(coutCD_2)
## Test 2
library(lmtest)
library(car)
modele_robust2 <- coeftest(coutCD, vcov = hccm(coutCD, type = "hc1"))
modele_robust2
## Test 3
library(estimatr)
modele_robust3 <- lm_robust(log(c) ~ log(pLab) + log(pMat) + log(pCap) + log(qOut), data = df, se_type = "HC0")
summary(modele_robust3)
summary(coutCD)
bptest(modele_robust3)
bptest(coutCD)
#### Cela ne modifie rien A PART LES PVALUES
## Test 4 : MCQG
modele <- lm(log(c) ~ log(pLab) + log(pMat) + log(pCap) + log(qOut), data = df)
df$logresid2 <- log(residuals(modele)^2) # on ajoute la variable ln(e^2)
modeleresid <- lm(data=df,logresid2 ~ log(pLab) + log(pMat) + log(pCap) + log(qOut)) # on les régresse sur les x
df$e2chap <- exp(modeleresid$fitted.values) # on calcule la variance prédite
modele_mcqg <- lm(data=df ,log(c) ~ log(pLab) + log(pMat) + log(pCap) + log(qOut) ,weight=1/e2chap) # on pondère la régression par 1/variance
summary(modele_mcqg)
bptest(modele_mcqg)
test_heteroscedasticite(modele_robust2)
test_heteroscedasticite(modele_robust2)
bptest(modele_robust2)
summary(modele_mcqg)
summary(coutCD)
calcule_derivee <- function(
df,
coefs,
modele,
){
"Renvoie les dérivées de la fonction de cout"
if (modele == 'cobbdouglas'){
df <- df %>%
mutate(
dLab = coefs["pLab"] * c / pLab,
dMat = coefs["pMat"] * c / pMat,
dCap = coefs["pCap"] * c / pCap,
dqOut = coefs['qOut'] * c / qOut
)
%>%
mutate(
dLab.fit = coefs["pLab"] * c.fit / pLab,
dMat.fit = coefs["pMat"] * c.fit / pMat,
dCap.fit = coefs["pCap"] * c.fit / pCap,
dqOut.fit = coefs['qOut'] * c.fit / qOut
)
}
if (modele == 'translog'){
df <- df %>%
mutate(
dLab = 1/pLab * (
coefs['Lab'] +
coefs['Lab2'] * log(pLab) +
0.5 * coefs['LabqOut'] * log(qOut) +
coefs['LabMat'] * log(pMat) +
coefs['CapLab'] * log(pCap)
),
dMat = 1/pMat * (
coefs['Mat'] +
coefs['Mat2'] * log(pMat) +
0.5 * coefs['MatqOut'] * log(qOut) +
coefs['LabMat'] * log(pLab) +
coefs['CapMat'] * log(pCap)
),
dCap = 1/pCap * (
coefs['Cap'] +
coefs['Cap2'] * log(pCap) +
0.5 * coefs['CapqOut'] * log(qOut) +
coefs['CapMat'] * log(pMat) +
coefs['CapLab'] * log(pLab)
),
dqOut = 1/qOut * (
coefs['qOut'] +
coefs['qOut2'] * log(qOut) +
0.5 * coefs['LabqOut'] * log(qLab) +
0.5 * coefs['MatqOut'] * log(pMat) +
0.5 * coefs['CapqOut'] * log(pCap)
)
)
return(df)
}
}
if (modele == 'translog'){
df <- df %>%
mutate(
dLab = 1/pLab * (
coefs['Lab'] +
coefs['Lab2'] * log(pLab) +
0.5 * coefs['LabqOut'] * log(qOut) +
coefs['LabMat'] * log(pMat) +
coefs['CapLab'] * log(pCap)
),
dMat = 1/pMat * (
coefs['Mat'] +
coefs['Mat2'] * log(pMat) +
0.5 * coefs['MatqOut'] * log(qOut) +
coefs['LabMat'] * log(pLab) +
coefs['CapMat'] * log(pCap)
),
dCap = 1/pCap * (
coefs['Cap'] +
coefs['Cap2'] * log(pCap) +
0.5 * coefs['CapqOut'] * log(qOut) +
coefs['CapMat'] * log(pMat) +
coefs['CapLab'] * log(pLab)
),
dqOut = 1/qOut * (
coefs['qOut'] +
coefs['qOut2'] * log(qOut) +
0.5 * coefs['LabqOut'] * log(qLab) +
0.5 * coefs['MatqOut'] * log(pMat) +
0.5 * coefs['CapqOut'] * log(pCap)
)
)
}
calcule_derivee <- function(
df,
coefs,
modele,
){
"Renvoie les dérivées de la fonction de cout"
if (modele == 'cobbdouglas'){
df <- df %>%
mutate(
dLab = coefs["pLab"] * c / pLab,
dMat = coefs["pMat"] * c / pMat,
dCap = coefs["pCap"] * c / pCap,
dqOut = coefs['qOut'] * c / qOut
)
%>%
mutate(
dLab.fit = coefs["pLab"] * c.fit / pLab,
dMat.fit = coefs["pMat"] * c.fit / pMat,
dCap.fit = coefs["pCap"] * c.fit / pCap,
dqOut.fit = coefs['qOut'] * c.fit / qOut
)
}
if (modele == 'translog'){
df <- df %>%
mutate(
dLab = 1/pLab * (
coefs['Lab'] +
coefs['Lab2'] * log(pLab) +
0.5 * coefs['LabqOut'] * log(qOut) +
coefs['LabMat'] * log(pMat) +
coefs['CapLab'] * log(pCap)
),
dMat = 1/pMat * (
coefs['Mat'] +
coefs['Mat2'] * log(pMat) +
0.5 * coefs['MatqOut'] * log(qOut) +
coefs['LabMat'] * log(pLab) +
coefs['CapMat'] * log(pCap)
),
dCap = 1/pCap * (
coefs['Cap'] +
coefs['Cap2'] * log(pCap) +
0.5 * coefs['CapqOut'] * log(qOut) +
coefs['CapMat'] * log(pMat) +
coefs['CapLab'] * log(pLab)
),
dqOut = 1/qOut * (
coefs['qOut'] +
coefs['qOut2'] * log(qOut) +
0.5 * coefs['LabqOut'] * log(qLab) +
0.5 * coefs['MatqOut'] * log(pMat) +
0.5 * coefs['CapqOut'] * log(pCap)
)
)
}
return(df)
}
calcule_derivee <- function(
df,
coefs,
modele
){
"Renvoie les dérivées de la fonction de cout"
if (modele == 'cobbdouglas'){
df <- df %>%
mutate(
dLab = coefs["pLab"] * c / pLab,
dMat = coefs["pMat"] * c / pMat,
dCap = coefs["pCap"] * c / pCap,
dqOut = coefs['qOut'] * c / qOut
)
%>%
mutate(
dLab.fit = coefs["pLab"] * c.fit / pLab,
dMat.fit = coefs["pMat"] * c.fit / pMat,
dCap.fit = coefs["pCap"] * c.fit / pCap,
dqOut.fit = coefs['qOut'] * c.fit / qOut
)
}
if (modele == 'translog'){
df <- df %>%
mutate(
dLab = 1/pLab * (
coefs['Lab'] +
coefs['Lab2'] * log(pLab) +
0.5 * coefs['LabqOut'] * log(qOut) +
coefs['LabMat'] * log(pMat) +
coefs['CapLab'] * log(pCap)
),
dMat = 1/pMat * (
coefs['Mat'] +
coefs['Mat2'] * log(pMat) +
0.5 * coefs['MatqOut'] * log(qOut) +
coefs['LabMat'] * log(pLab) +
coefs['CapMat'] * log(pCap)
),
dCap = 1/pCap * (
coefs['Cap'] +
coefs['Cap2'] * log(pCap) +
0.5 * coefs['CapqOut'] * log(qOut) +
coefs['CapMat'] * log(pMat) +
coefs['CapLab'] * log(pLab)
),
dqOut = 1/qOut * (
coefs['qOut'] +
coefs['qOut2'] * log(qOut) +
0.5 * coefs['LabqOut'] * log(qLab) +
0.5 * coefs['MatqOut'] * log(pMat) +
0.5 * coefs['CapqOut'] * log(pCap)
)
)
}
return(df)
}
calcule_derivee <- function(
df,
coefs,
modele = 'translog'
){
"Renvoie les dérivées de la fonction de cout"
if (modele == 'cobbdouglas'){
df <- df %>%
mutate(
dLab = coefs["pLab"] * c / pLab,
dMat = coefs["pMat"] * c / pMat,
dCap = coefs["pCap"] * c / pCap,
dqOut = coefs['qOut'] * c / qOut
)
%>%
mutate(
dLab.fit = coefs["pLab"] * c.fit / pLab,
dMat.fit = coefs["pMat"] * c.fit / pMat,
dCap.fit = coefs["pCap"] * c.fit / pCap,
dqOut.fit = coefs['qOut'] * c.fit / qOut
)
}
if (modele == 'translog'){
df <- df %>%
mutate(
dLab = 1/pLab * (
coefs['Lab'] +
coefs['Lab2'] * log(pLab) +
0.5 * coefs['LabqOut'] * log(qOut) +
coefs['LabMat'] * log(pMat) +
coefs['CapLab'] * log(pCap)
),
dMat = 1/pMat * (
coefs['Mat'] +
coefs['Mat2'] * log(pMat) +
0.5 * coefs['MatqOut'] * log(qOut) +
coefs['LabMat'] * log(pLab) +
coefs['CapMat'] * log(pCap)
),
dCap = 1/pCap * (
coefs['Cap'] +
coefs['Cap2'] * log(pCap) +
0.5 * coefs['CapqOut'] * log(qOut) +
coefs['CapMat'] * log(pMat) +
coefs['CapLab'] * log(pLab)
),
dqOut = 1/qOut * (
coefs['qOut'] +
coefs['qOut2'] * log(qOut) +
0.5 * coefs['LabqOut'] * log(qLab) +
0.5 * coefs['MatqOut'] * log(pMat) +
0.5 * coefs['CapqOut'] * log(pCap)
)
)
}
return(df)
}
calcule_derivee <- function(
df,
coefs,
modele = 'translog'
){
"Renvoie les dérivées de la fonction de cout"
if (modele == 'cobbdouglas'){
df <- df %>%
mutate(
dLab = coefs["pLab"] * c / pLab,
dMat = coefs["pMat"] * c / pMat,
dCap = coefs["pCap"] * c / pCap,
dqOut = coefs['qOut'] * c / qOut
)
# %>%
#   mutate(
#     dLab.fit = coefs["pLab"] * c.fit / pLab,
#     dMat.fit = coefs["pMat"] * c.fit / pMat,
#     dCap.fit = coefs["pCap"] * c.fit / pCap,
#     dqOut.fit = coefs['qOut'] * c.fit / qOut
#   )
}
if (modele == 'translog'){
df <- df %>%
mutate(
dLab = 1/pLab * (
coefs['Lab'] +
coefs['Lab2'] * log(pLab) +
0.5 * coefs['LabqOut'] * log(qOut) +
coefs['LabMat'] * log(pMat) +
coefs['CapLab'] * log(pCap)
),
dMat = 1/pMat * (
coefs['Mat'] +
coefs['Mat2'] * log(pMat) +
0.5 * coefs['MatqOut'] * log(qOut) +
coefs['LabMat'] * log(pLab) +
coefs['CapMat'] * log(pCap)
),
dCap = 1/pCap * (
coefs['Cap'] +
coefs['Cap2'] * log(pCap) +
0.5 * coefs['CapqOut'] * log(qOut) +
coefs['CapMat'] * log(pMat) +
coefs['CapLab'] * log(pLab)
),
dqOut = 1/qOut * (
coefs['qOut'] +
coefs['qOut2'] * log(qOut) +
0.5 * coefs['LabqOut'] * log(qLab) +
0.5 * coefs['MatqOut'] * log(pMat) +
0.5 * coefs['CapqOut'] * log(pCap)
)
)
}
return(df)
}
df <- df %>%
mutate(
dLab = coefs["pLab"] * c / pLab,
dMat = coefs["pMat"] * c / pMat,
dCap = coefs["pCap"] * c / pCap,
dqOut = coefs['qOut'] * c / qOut,
dLab.fit = coefs["pLab"] * c.fit / pLab,
dMat.fit = coefs["pMat"] * c.fit / pMat,
dCap.fit = coefs["pCap"] * c.fit / pCap,
dqOut.fit = coefs['qOut'] * c.fit / qOut
)
calcule_derivee <- function(
df,
coefs,
modele = 'translog'
){
"Renvoie les dérivées de la fonction de cout"
if (modele == 'cobbdouglas'){
df <- df %>%
mutate(
dLab = coefs["pLab"] * c / pLab,
dMat = coefs["pMat"] * c / pMat,
dCap = coefs["pCap"] * c / pCap,
dqOut = coefs['qOut'] * c / qOut,
dLab.fit = coefs["pLab"] * c.fit / pLab,
dMat.fit = coefs["pMat"] * c.fit / pMat,
dCap.fit = coefs["pCap"] * c.fit / pCap,
dqOut.fit = coefs['qOut'] * c.fit / qOut
)
}
if (modele == 'translog'){
df <- df %>%
mutate(
dLab = 1/pLab * (
coefs['Lab'] +
coefs['Lab2'] * log(pLab) +
0.5 * coefs['LabqOut'] * log(qOut) +
coefs['LabMat'] * log(pMat) +
coefs['CapLab'] * log(pCap)
),
dMat = 1/pMat * (
coefs['Mat'] +
coefs['Mat2'] * log(pMat) +
0.5 * coefs['MatqOut'] * log(qOut) +
coefs['LabMat'] * log(pLab) +
coefs['CapMat'] * log(pCap)
),
dCap = 1/pCap * (
coefs['Cap'] +
coefs['Cap2'] * log(pCap) +
0.5 * coefs['CapqOut'] * log(qOut) +
coefs['CapMat'] * log(pMat) +
coefs['CapLab'] * log(pLab)
),
dqOut = 1/qOut * (
coefs['qOut'] +
coefs['qOut2'] * log(qOut) +
0.5 * coefs['LabqOut'] * log(qLab) +
0.5 * coefs['MatqOut'] * log(pMat) +
0.5 * coefs['CapqOut'] * log(pCap)
)
)
}
return(df)
}
df %>% calcul_derivee(df, coefs = coeff, modele = 'cobbdouglas')
calcul_derivees <- function(
df,
coefs,
modele = 'translog'
){
"Renvoie les dérivées de la fonction de cout"
if (modele == 'cobbdouglas'){
df <- df %>%
mutate(
dLab = coefs["pLab"] * c / pLab,
dMat = coefs["pMat"] * c / pMat,
dCap = coefs["pCap"] * c / pCap,
dqOut = coefs['qOut'] * c / qOut,
dLab.fit = coefs["pLab"] * c.fit / pLab,
dMat.fit = coefs["pMat"] * c.fit / pMat,
dCap.fit = coefs["pCap"] * c.fit / pCap,
dqOut.fit = coefs['qOut'] * c.fit / qOut
)
}
if (modele == 'translog'){
df <- df %>%
mutate(
dLab = 1/pLab * (
coefs['Lab'] +
coefs['Lab2'] * log(pLab) +
0.5 * coefs['LabqOut'] * log(qOut) +
coefs['LabMat'] * log(pMat) +
coefs['CapLab'] * log(pCap)
),
dMat = 1/pMat * (
coefs['Mat'] +
coefs['Mat2'] * log(pMat) +
0.5 * coefs['MatqOut'] * log(qOut) +
coefs['LabMat'] * log(pLab) +
coefs['CapMat'] * log(pCap)
),
dCap = 1/pCap * (
coefs['Cap'] +
coefs['Cap2'] * log(pCap) +
0.5 * coefs['CapqOut'] * log(qOut) +
coefs['CapMat'] * log(pMat) +
coefs['CapLab'] * log(pLab)
),
dqOut = 1/qOut * (
coefs['qOut'] +
coefs['qOut2'] * log(qOut) +
0.5 * coefs['LabqOut'] * log(qLab) +
0.5 * coefs['MatqOut'] * log(pMat) +
0.5 * coefs['CapqOut'] * log(pCap)
)
)
}
return(df)
}
df %>% calculs_derivees(df, coefs = coeff, modele = 'cobbdouglas')
df %>% calcul_derivees(df, coefs = coeff, modele = 'cobbdouglas')
df %>% calcul_derivees(df = df, coefs = coeff, modele = 'cobbdouglas')
df %>% calcul_derivees(coefs = coeff, modele = 'cobbdouglas')
df <- df %>%
mutate(
dLab = coefs["pLab"] * c / pLab,
dMat = coefs["pMat"] * c / pMat,
dCap = coefs["pCap"] * c / pCap,
dqOut = coefs['qOut'] * c / qOut,
dLab.fit = coefs["pLab"] * c.fit / pLab,
dMat.fit = coefs["pMat"] * c.fit / pMat,
dCap.fit = coefs["pCap"] * c.fit / pCap,
dqOut.fit = coefs['qOut'] * c.fit / qOut
)
shiny::runApp('~/M2/S2/Big data/VG_Shiny/Lucas/app')
runApp('~/M2/S2/Big data/VG_Shiny/Lucas/app')
runApp('~/M2/S2/Big data/VG_Shiny/Guillaume')
runApp('~/M2/S2/Big data/VG_Shiny/Guillaume')
setwd("~/M2/S2/Big data/VG_Shiny/Guillaume")
setwd("~/M2/S2/Big data/VG_Shiny")
runApp('Guillaume')
setwd("~/M2/S2/Big data/VG_Shiny")
runApp('Guillaume')
