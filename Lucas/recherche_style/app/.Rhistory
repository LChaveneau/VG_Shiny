mutate(
dLab = coefs["pLab"] * c / pLab,
dMat = coefs["pMat"] * c / pMat,
qCap = coefs["qCap"] * c / qCap,
dqOut = coefs['qOut'] * c / qOut,
dLab.fit = coefs["pLab"] * c.fit / pLab,
dMat.fit = coefs["pMat"] * c.fit / pMat,
qCap.fit = coefs["qCap"] * c.fit / qCap,
dqOut.fit = coefs['qOut'] * c.fit / qOut
)
}
if (modele == "translog"){
df <- df %>%
mutate(
dLab = sLab * c / pLab,
dMat = sMat * c / pMat,
dCap = sCap * c / pCap,
dqOut = ( coefs["qOut"] + coefs["qOut2"]*log(qOut) ) * c / qOut
) %>%
mutate(
dLab.fit = sLab * c.fit / pLab,
dMat.fit = sMat * c.fit / pMat,
dCap.fit = sCap * c.fit / pCap,
dqOut.fit = ( coefs["qOut"] + coefs["qOut2"]*log(qOut) ) * c.fit / qOut
)
}
if (modele == "cobbdouglasCT"){
df <- df %>%
mutate(
dLab = coefs["pLab"] * c / pLab,
dMat = coefs["pMat"] * c / pMat,
dCap = coefs["qCap"] * c / qCap,
dqOut = coefs['qOut'] * c / qOut,
dLab.fit = coefs["pLab"] * c.fit / pLab,
dMat.fit = coefs["pMat"] * c.fit / pMat,
dCap.fit = coefs["qCap"] * c.fit / qCap,
dqOut.fit = coefs['qOut'] * c.fit / qOut)
}
return(df)
}
df <- df %>% calcule_derivees_cout(coefs = coeff, modele = 'cobbdouglasCT')
t.test(df$dLab, df$dLab.fit)
t.test(df$qCap, df$dCap.fit)
#Yes
t.test(df$dMat, df$dMat.fit)
#
t.test(df$dqOut, df$dqOut.fit)
t.test(df$dLab, df$qLab)
t.test(df$dCap, df$qCap)
t.test(df$dMat, df$qMat)
t.test(df$dLab, df$qLab)
t.test(df$dCap, df$qCap)
t.test(df$dMat, df$qMat)
t.test(df$dLab.fit, df$qLab)
#Yes
t.test(df$dCap.fit, df$qCap)
#No
t.test(df$dMat.fit, df$qMat)
t.test(df$dLab, df$dLab.fit)
#No
t.test(df$qCap, df$dCap.fit)
t.test(df$dLab.fit, df$qLab)
#No
t.test(df$dCap.fit, df$qCap)
#Yes
t.test(df$dCap, df$qCap)
#No
t.test(df$dMat, df$qMat)
#Yes
t.test(df$dqOut, df$dqOut.fit)
t.test(df$dLab, df$qLab)
#Yes
t.test(df$dMat, df$dMat.fit)
#No
t.test(df$qCap, df$dCap.fit)
t.test(df$dLab, df$dLab.fit)
summary(coutCD)
df %>%
filter(c.fit < 0)
df %>%
select(c(c, c.fit)) %>%
pivot_longer(cols = everything()) %>%
ggplot() +
geom_histogram(aes(x = value,
y = ..density..,
color = name,
fill = name),
bins = 50,
alpha = .6) +
scale_fill_brewer(palette = "Set2") +
scale_color_brewer(palette = "Set2") +
labs(x = "",
y = "Densité",
title = "Coût obsevé VS coût estimé",
subtitle = "Modèle CobbDouglas") +
facet_wrap(~name,
nrow = 2) +
theme(legend.position = "none")
df <- df %>%
mutate(sCap = vCap / c,
sLab = vLab / c,
sMat = vMat / c)
df <- df %>%
mutate(sCap.fit = dCap * pCap / c.fit,
sLab.fit = dLab * pLab / c.fit,
sMat.fit = dMat * pMat / c.fit) %>%
mutate(sTot = sCap + sLab + sMat,
sTot.fit = sCap.fit + sLab.fit + sMat.fit)
df$sCap
df %>% ggplot
sInputs_plot <- df %>%
sInputs_plot <- df %>%
df <- df %>%
mutate(sCap = vCap / c,
sLab = vLab / c,
sMat = vMat / c)
df <- df %>%
mutate(sCap = vCap / c,
sLab = vLab / c,
sMat = vMat / c)
df <- df %>%
mutate(sCap.fit = dCap * pCap / c.fit,
sLab.fit = dLab * pLab / c.fit,
sMat.fit = dMat * pMat / c.fit) %>%
mutate(sTot = sCap + sLab + sMat,
sTot.fit = sCap.fit + sLab.fit + sMat.fit)
sTot
df$sTot
df$sTot.fit
shiny::runApp('M2/S2/VG_Shiny/Lucas/app')
runApp('M2/S2/Big data/VG_Shiny/Lucas/app')
df$sTot.fit
sInputs_plot <- df %>%
select(c(sCap.fit,
sLab.fit,
sMat.fit)) %>%
pivot_longer(cols = everything(),
names_to = "input",
values_to = "share") %>%
mutate(input = input %>%
as.factor()) %>%
mutate(input = fct_recode(input,
"Capital" = "sCap.fit",
"Travail" = "sLab.fit",
"Consommations intermédiaires" = "sMat.fit")) %>%
ggplot() +
geom_histogram(aes(x = share,
y = ..density..,
fill = input,
color = input),
alpha = .6,
bins = 30) +
scale_fill_brewer(palette = "Set2") +
scale_color_brewer(palette = "Set2") +
labs(x = "Part dans la dépense",
y = "Densité",
title = "Part de chaque input dans la dépense") +
facet_grid(~input) +
theme(legend.position = "none")
obs <- "Observée (s = 1)"
est <- paste0("Estimée (s = ", mean(df$sTot.fit) %>%
round(2), ")")
sTot_plot <- df %>%
ggplot(aes(x = sTot.fit,
y = ..density..)) +
geom_histogram(alpha = .4,
color = "grey",
bins = 50) +
geom_vline(aes(color = obs,
xintercept = 1),
linetype = "dashed",
size = .8) +
geom_vline(aes(color = est,
xintercept = mean(sTot.fit)),
linetype = "dashed",
size = .8) +
scale_color_manual(values = c("red", "black")) +
labs(x = "",
y = "Densité",
title = "Distribution des parts de dépense totale",
subtitle = "Moyenne entre parenthèses") +
guides(color = guide_legend(title = "Part totale moyenne")) +
theme(legend.position = "bottom")
ggarrange(sInputs_plot,
sTot_plot,
nrow = 2)
runApp('M2/S2/Big data/VG_Shiny/Lucas/app')
## smaller others observations
N = 400
X1 <- rnorm(3*N/4, 40, 100)
Y1 <- 1 + 4*X1 + rnorm(3*N/4, 0, 200)
X2 <- rnorm(N/4, 350, 40)
Y2 <- -500 - 2*X2 + rnorm(N/4, 0, 150)
data <- data.frame(c(X1,X2),c(Y1, Y2))
reg <- lm(X~Y, data = data)
View(data)
reg <- lm(data[,1]) ~ data[,2])
reg <- lm(data[,1] ~ data[,2])
reg$rei
reg$residuals
graph_plotnetrec <- function(data, type){
circle.size = 2.5
colors = list('red', '#0066CC', '#4BB14B', '#FCE638')
r=0.6
X <- data[,1]
Y <- data[,2]
N <- length(X)
S.bar<-factor(sign((X-mean(X))*(Y-(mean(Y)))))
X.bar <- rep(mean(X),N)
Y.bar <- rep(mean(Y),N)
plotscatter<-  ggplot(data=data, aes(x=X,y=Y)) +
geom_point(size=circle.size, pch=21, fill=colors[[4]]) +
geom_hline(yintercept=Y.bar, linetype='dashed',color="orange",size=0.5) +
geom_vline(xintercept=X.bar, linetype='dashed',color="orange",size=0.5) +
stat_smooth(method="lm", se=FALSE,color="black",size=1)+
ggtitle('Y vs. X Scatterplot') +
xlab("X")+
ylab("Y")
SX<-sort(X,decreasing=FALSE)
SY<-sort(Y,decreasing=FALSE)
N <- length(X)
Nm1s=(N-1)^2
Nmat=N*(N-1)/2
#initialyse
RES<-matrix(0,(N-1),(N-1))
for(i in 1:(N-1))
{
for(j in (i+1):N)
{
TRUC<-rep(0,N-1)
posyi<-which(SY==Y[i])
posyj<-which(SY==Y[j])
min=min(c(posyi,posyj))
max=max(c(posyi,posyj))-1
TRUC<- replace(TRUC,c(min:max),sign((X[i]-X[j])*(Y[i]-Y[j])))
RES[,i:(j-1)]=RES[,i:(j-1)]+TRUC
}
}
truc1<- vector()
truc2<- vector()
for(i in 1:N){
up=N-1
truc1=cbind(truc1,t((rep(i,up))))
truc2=cbind(truc2,t((rep((i+1),(up)))))
}
truc3=t(rep(seq(1,N-1),N-1))
truc4=t(rep(seq(2,N),N-1))
Xmin<-rep(0,Nm1s)
Xmax<-rep(0,Nm1s)
Ymin<-rep(0,Nm1s)
Ymax<-rep(0,Nm1s)
for(i in 1:Nm1s){
Xmin[i]<-X[(truc1[i])]
Xmax[i]<-X[(truc2[i])]
Ymin[i]<-SY[(truc3[i])]
Ymax[i]<-SY[(truc4[i])]
i=i+1
}
S<-(matrix(RES,((N-1)^2)))
MS<-mean(S)
MS<-quantile(S, probs = seq(0, 1, 0.2))
#MS<-c(-500,0,1000,2000,2440)
d=data.frame(Xmin,Xmax,Ymin,Ymax,S)
######################### 4th output ###########################
plotnetrec <- ggplot(data=d,aes(Xmin, Ymin, xmin=Xmin, xmax=Xmax,ymin=Ymin, ymax=Ymax)) +
#  geom_point(size=circle.size, pch=21, fill=colors[[4]]) +
#  geom_hline(yintercept=Y.bar, linetype='longdash',color="red") +
#  geom_vline(xintercept=X.bar, linetype='longdash',color="red") +
geom_rect(alpha=0.5, aes(fill=S)) +
#alpha=.1
# S continuous
#scale_fill_gradient2(low = 'red', mid = 'white', high = 'blue', breaks=c(-1,0,1)) +
###################################################################
# scale_fill_gradientn(colours = c(
#   rgb(3,77,0, maxColorValue = 255),
#   "cyan",
#   "white",
#   rgb(255, 255 ,51, maxColorValue = 255),
#   rgb(212,92,22, maxColorValue = 255)),
#                        values = scales::rescale(c(min(S), -0.5, 0, 0.5,  max(S))))+
###################################################################
scale_fill_gradientn(colours = c(
rgb(201,9,9, maxColorValue = 255),
rgb(255, 122 ,243, maxColorValue = 255),
"white",
"cyan",
rgb(14,18,77, maxColorValue = 255)),
limits = c(-max(abs(S)), max(abs(S))))+
#####################################################################
#rescaler=function(S, ...) S, oob=identity) +
#scale_fill_gradientn(colours = c("firebrick4","firebrick1","white","deepskyblue1","deepskyblue4"), breaks=MS) +
#scale_fill_gradientn(colours = c("red","white","deepskyblue3","deepskyblue2","deepskyblue3"), breaks=MS) +
# S discrete
#scale_fill_brewer(palette="Spectral")+
#scale_fill_manual(breaks= quantile(S), values=c('white','cyan','turquoise2','blue2')) +
# xlim(0, 5) +
#  ylim(0, 5) +
xlab("X")+
ylab("Y")
circle.size = 2.5
colors = list('red', '#0066CC', '#4BB14B', '#FCE638')
r=0.6
X <- data[,1]
Y <- data[,2]
reg <- lm(X~Y)
Y <- reg$residuals
N <- length(X)
S.bar<-factor(sign((X-mean(X))*(Y-(mean(Y)))))
X.bar <- rep(mean(X),N)
Y.bar <- rep(mean(Y),N)
plotscatter<-  ggplot(data=data, aes(x=X,y=Y)) +
geom_point(size=circle.size, pch=21, fill=colors[[4]]) +
geom_hline(yintercept=Y.bar, linetype='dashed',color="orange",size=0.5) +
geom_vline(xintercept=X.bar, linetype='dashed',color="orange",size=0.5) +
stat_smooth(method="lm", se=FALSE,color="black",size=1)+
ggtitle('Y vs. X Scatterplot') +
xlab("X")+
ylab("Y")
SX<-sort(X,decreasing=FALSE)
SY<-sort(Y,decreasing=FALSE)
N <- length(X)
Nm1s=(N-1)^2
Nmat=N*(N-1)/2
#initialyse
RES<-matrix(0,(N-1),(N-1))
for(i in 1:(N-1))
{
for(j in (i+1):N)
{
TRUC<-rep(0,N-1)
posyi<-which(SY==Y[i])
posyj<-which(SY==Y[j])
min=min(c(posyi,posyj))
max=max(c(posyi,posyj))-1
TRUC<- replace(TRUC,c(min:max),sign((X[i]-X[j])*(Y[i]-Y[j])))
RES[,i:(j-1)]=RES[,i:(j-1)]+TRUC
}
}
truc1<- vector()
truc2<- vector()
for(i in 1:N){
up=N-1
truc1=cbind(truc1,t((rep(i,up))))
truc2=cbind(truc2,t((rep((i+1),(up)))))
}
truc3=t(rep(seq(1,N-1),N-1))
truc4=t(rep(seq(2,N),N-1))
Xmin<-rep(0,Nm1s)
Xmax<-rep(0,Nm1s)
Ymin<-rep(0,Nm1s)
Ymax<-rep(0,Nm1s)
for(i in 1:Nm1s){
Xmin[i]<-X[(truc1[i])]
Xmax[i]<-X[(truc2[i])]
Ymin[i]<-SY[(truc3[i])]
Ymax[i]<-SY[(truc4[i])]
i=i+1
}
S<-(matrix(RES,((N-1)^2)))
MS<-mean(S)
MS<-quantile(S, probs = seq(0, 1, 0.2))
#MS<-c(-500,0,1000,2000,2440)
d=data.frame(Xmin,Xmax,Ymin,Ymax,S)
######################### 4th output ###########################
plotnetrec2 <- ggplot(data=d,aes(Xmin, Ymin, xmin=Xmin, xmax=Xmax,ymin=Ymin, ymax=Ymax)) +
#  geom_point(size=circle.size, pch=21, fill=colors[[4]]) +
#  geom_hline(yintercept=Y.bar, linetype='longdash',color="red") +
#  geom_vline(xintercept=X.bar, linetype='longdash',color="red") +
geom_rect(alpha=0.5, aes(fill=S)) +
#alpha=.1
# S continuous
#scale_fill_gradient2(low = 'red', mid = 'white', high = 'blue', breaks=c(-1,0,1)) +
###################################################################
# scale_fill_gradientn(colours = c(
#   rgb(3,77,0, maxColorValue = 255),
#   "cyan",
#   "white",
#   rgb(255, 255 ,51, maxColorValue = 255),
#   rgb(212,92,22, maxColorValue = 255)),
#                        values = scales::rescale(c(min(S), -0.5, 0, 0.5,  max(S))))+
###################################################################
scale_fill_gradientn(colours = c(
rgb(201,9,9, maxColorValue = 255),
rgb(255, 122 ,243, maxColorValue = 255),
"white",
"cyan",
rgb(14,18,77, maxColorValue = 255)),
limits = c(-max(abs(S)), max(abs(S))))+
#####################################################################
#rescaler=function(S, ...) S, oob=identity) +
#scale_fill_gradientn(colours = c("firebrick4","firebrick1","white","deepskyblue1","deepskyblue4"), breaks=MS) +
#scale_fill_gradientn(colours = c("red","white","deepskyblue3","deepskyblue2","deepskyblue3"), breaks=MS) +
# S discrete
#scale_fill_brewer(palette="Spectral")+
#scale_fill_manual(breaks= quantile(S), values=c('white','cyan','turquoise2','blue2')) +
# xlim(0, 5) +
#  ylim(0, 5) +
xlab("X")+
ylab("Y")
return(list(plotscatter,plotnetrec, plotnetrec2))
}
graphique <- function(data, show_scatter = F){
graphiques <- graph_plotnetrec(data)
if(show_scatter == T){
return(grid.arrange(graphiques[[1]], graphiques[[2]]), graphique[[3]], nrow = 3)
}else{
return(graphiques[[2]], graphiques[[3]], nrow = 3)
}
}
### Normal case positive
N=200
X <- sort(rnorm(N, 40, 100))
Y <- 1 + 2*X + rnorm(N, 0, 200) # forte variance
data <- data.frame(X,Y)
graphique(data, show_scatter = T)
knitr::opts_chunk$set(fig.width=13, fig.height=10,
fig.align='center', echo = FALSE,
warning=FALSE, message=FALSE)
library(tidyverse)
library(gridExtra)
library(tibble)
library(ggplot2)
library(knitr)
library(UsingR)
library(skimr)
library(pastecs)
#library(summarytools)
library(psych)
library(kableExtra)
library(grid)
library(TeachingDemos)
library('MASS')
library(forecast)
library(fpp2)
library(scales)
library(RColorBrewer)
library("cowplot")
library(extrafont)
library(plotly)
library(sfsmisc)
library(patternplot)
library(stargazer)
library(latex2exp)
library(dplyr)
library(gridExtra)
library(scales)
theme_set(theme_minimal())
### Normal case positive
N=200
X <- sort(rnorm(N, 40, 100))
Y <- 1 + 2*X + rnorm(N, 0, 200) # forte variance
data <- data.frame(X,Y)
graphique(data, show_scatter = T)
graphique <- function(data, show_scatter = F){
graphiques <- graph_plotnetrec(data)
if(show_scatter == T){
return(grid.arrange(graphiques[[1]], graphiques[[2]], graphique[[3]], nrow = 3))
}else{
return(graphiques[[2]], graphiques[[3]], nrow = 3)
}
}
graphique <- function(data, show_scatter = F){
graphiques <- graph_plotnetrec(data)
if(show_scatter == T){
return(grid.arrange(graphiques[[1]], graphiques[[2]], graphique[[3]], nrow = 3))
}else{
return(grid.arrange(graphiques[[2]], graphiques[[3]], nrow = 3))
}
}
### Normal case negative
N=400
X <- sort(rnorm(N, 40, 100))
Y <- 1 - 2*X + rnorm(N, 0, 200) # forte variance
data <- data.frame(X,Y)
graphique(data, show_scatter = T)
View(graph_plotnetrec)
View(graphique)
View(data)
remotes::install_github("rstudio/bootstraplib")
devtools::install_github("rstudio/bootstraplib")
install.packages('Rtools')
devtools::install_github("rstudio/bootstraplib", force = TRUE)
devtools::install_github("rstudio/bootstraplib", force = TRUE)
remotes::install_github("rstudio/bootstraplib")
remotes::install_github("rstudio/bootstraplib", force = TRUE)
remotes::install_github("rstudio/bootstraplib", force = TRUE)
remotes::install_github("rstudio/bootstraplib")
devtools::install_github("rstudio/bootstraplib")
devtools::install_github("rstudio/bootstraplib", force = TRUE)
library(bootstrap)
library(bootstrapLib)
library(bootstraplib)
remotes::install_github("rstudio/bootstraplib")
remotes::install_github("rstudio/bootstraplib", force = TRUE)
library(bootstraplib)
devtools::install_github("rstudio/bootstraplib", force = TRUE)
library(bootstraplib)
install.Rtools(check = TRUE, check_r_update = TRUE, GUI = TRUE)
install.Rtools(check = TRUE, check_r_update = TRUE, GUI = TRUE, ...)
install.packages('installr')
install.Rtools(check = TRUE, check_r_update = TRUE, GUI = TRUE, ...)
install.Rtools(check = TRUE, check_r_update = TRUE, GUI = TRUE
)
installr::install.Rtools(check = TRUE, check_r_update = TRUE, GUI = TRUE)
devtools::install_github("rstudio/bootstraplib")
devtools::install_github("rstudio/bootstraplib", force = TRUE)
remotes::install_github("rstudio/bootstraplib", force = TRUE)
remotes::install_github("rstudio/bootstraplib", force = TRUE)
remotes::install_github("rstudio/bootstraplib", force = TRUE)
library(bootstraplib)
devtools::install_github("rstudio/bootstraplib", force = TRUE)
shiny::runApp('M2/S2/Big data/VG_Shiny/Lucas/recherche_style/app')
