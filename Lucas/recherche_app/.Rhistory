#heterogeneity dummies
Y <- 100 * log(3*X) + rnorm(N, 0, 75)
data <- data.frame(x=X, y=Y)
plot(Y ~X)
knitr::opts_chunk$set(fig.width=13, fig.height=10,
fig.align='center', echo = FALSE,
warning=FALSE, message=FALSE)
library(tidyverse)
library(gridExtra)
library(tibble)
library(ggplot2)
library(knitr)
library(UsingR)
library(skimr)
library(pastecs)
#library(summarytools)
library(psych)
library(kableExtra)
library(grid)
library(TeachingDemos)
library('MASS')
library(forecast)
library(fpp2)
library(scales)
library(RColorBrewer)
library("cowplot")
library(extrafont)
library(plotly)
library(sfsmisc)
library(patternplot)
library(stargazer)
library(latex2exp)
library(dplyr)
library(gridExtra)
library(scales)
theme_set(theme_minimal())
graph_plotnetrec <- function(data, type){
circle.size = 2.5
colors = list('red', '#0066CC', '#4BB14B', '#FCE638')
r=0.6
X <- data[,1]
Y <- data[,2]
N <- length(X)
S.bar<-factor(sign((X-mean(X))*(Y-(mean(Y)))))
X.bar <- rep(mean(X),N)
Y.bar <- rep(mean(Y),N)
plotscatter<-  ggplot(data=data, aes(x=X,y=Y)) +
geom_point(size=circle.size, pch=21, fill=colors[[4]]) +
geom_hline(yintercept=Y.bar, linetype='dashed',color="orange",size=0.5) +
geom_vline(xintercept=X.bar, linetype='dashed',color="orange",size=0.5) +
stat_smooth(method="lm", se=FALSE,color="black",size=1)+
ggtitle('Y vs. X Scatterplot') +
xlab("X")+
ylab("Y")
SX<-sort(X,decreasing=FALSE)
SY<-sort(Y,decreasing=FALSE)
N <- length(X)
Nm1s=(N-1)^2
Nmat=N*(N-1)/2
#initialyse
RES<-matrix(0,(N-1),(N-1))
for(i in 1:(N-1))
{
for(j in (i+1):N)
{
TRUC<-rep(0,N-1)
posyi<-which(SY==Y[i])
posyj<-which(SY==Y[j])
min=min(c(posyi,posyj))
max=max(c(posyi,posyj))-1
TRUC<- replace(TRUC,c(min:max),sign((X[i]-X[j])*(Y[i]-Y[j])))
RES[,i:(j-1)]=RES[,i:(j-1)]+TRUC
}
}
truc1<- vector()
truc2<- vector()
for(i in 1:N){
up=N-1
truc1=cbind(truc1,t((rep(i,up))))
truc2=cbind(truc2,t((rep((i+1),(up)))))
}
truc3=t(rep(seq(1,N-1),N-1))
truc4=t(rep(seq(2,N),N-1))
Xmin<-rep(0,Nm1s)
Xmax<-rep(0,Nm1s)
Ymin<-rep(0,Nm1s)
Ymax<-rep(0,Nm1s)
for(i in 1:Nm1s){
Xmin[i]<-X[(truc1[i])]
Xmax[i]<-X[(truc2[i])]
Ymin[i]<-SY[(truc3[i])]
Ymax[i]<-SY[(truc4[i])]
i=i+1
}
S<-(matrix(RES,((N-1)^2)))
MS<-mean(S)
MS<-quantile(S, probs = seq(0, 1, 0.2))
#MS<-c(-500,0,1000,2000,2440)
d=data.frame(Xmin,Xmax,Ymin,Ymax,S)
######################### 4th output ###########################
plotnetrec <- ggplot(data=d,aes(Xmin, Ymin, xmin=Xmin, xmax=Xmax,ymin=Ymin, ymax=Ymax)) +
#  geom_point(size=circle.size, pch=21, fill=colors[[4]]) +
#  geom_hline(yintercept=Y.bar, linetype='longdash',color="red") +
#  geom_vline(xintercept=X.bar, linetype='longdash',color="red") +
geom_rect(alpha=0.5, aes(fill=S)) +
#alpha=.1
# S continuous
#scale_fill_gradient2(low = 'red', mid = 'white', high = 'blue', breaks=c(-1,0,1)) +
###################################################################
# scale_fill_gradientn(colours = c(
#   rgb(3,77,0, maxColorValue = 255),
#   "cyan",
#   "white",
#   rgb(255, 255 ,51, maxColorValue = 255),
#   rgb(212,92,22, maxColorValue = 255)),
#                        values = scales::rescale(c(min(S), -0.5, 0, 0.5,  max(S))))+
###################################################################
scale_fill_gradientn(colours = c(
rgb(201,9,9, maxColorValue = 255),
rgb(255, 122 ,243, maxColorValue = 255),
"white",
"cyan",
rgb(14,18,77, maxColorValue = 255)),
limits = c(-max(abs(S)), max(abs(S))))+
#####################################################################
#rescaler=function(S, ...) S, oob=identity) +
#scale_fill_gradientn(colours = c("firebrick4","firebrick1","white","deepskyblue1","deepskyblue4"), breaks=MS) +
#scale_fill_gradientn(colours = c("red","white","deepskyblue3","deepskyblue2","deepskyblue3"), breaks=MS) +
# S discrete
#scale_fill_brewer(palette="Spectral")+
#scale_fill_manual(breaks= quantile(S), values=c('white','cyan','turquoise2','blue2')) +
# xlim(0, 5) +
#  ylim(0, 5) +
xlab("X")+
ylab("Y")
circle.size = 2.5
colors = list('red', '#0066CC', '#4BB14B', '#FCE638')
r=0.6
reg <- lm(X~Y)
Y <- reg$residuals
N <- length(X)
S.bar<-factor(sign((X-mean(X))*(Y-(mean(Y)))))
X.bar <- rep(mean(X),N)
Y.bar <- rep(mean(Y),N)
plotscatter2<-  ggplot(data=data, aes(x=X,y=Y)) +
geom_point(size=circle.size, pch=21, fill=colors[[4]]) +
geom_hline(yintercept=Y.bar, linetype='dashed',color="orange",size=0.5) +
geom_vline(xintercept=X.bar, linetype='dashed',color="orange",size=0.5) +
stat_smooth(method="lm", se=FALSE,color="black",size=1)+
ggtitle('Y vs. X Scatterplot') +
xlab("X")+
ylab("Y")
SX<-sort(X,decreasing=FALSE)
SY<-sort(Y,decreasing=FALSE)
N <- length(X)
Nm1s=(N-1)^2
Nmat=N*(N-1)/2
#initialyse
RES<-matrix(0,(N-1),(N-1))
for(i in 1:(N-1))
{
for(j in (i+1):N)
{
TRUC<-rep(0,N-1)
posyi<-which(SY==Y[i])
posyj<-which(SY==Y[j])
min=min(c(posyi,posyj))
max=max(c(posyi,posyj))-1
TRUC<- replace(TRUC,c(min:max),sign((X[i]-X[j])*(Y[i]-Y[j])))
RES[,i:(j-1)]=RES[,i:(j-1)]+TRUC
}
}
truc1<- vector()
truc2<- vector()
for(i in 1:N){
up=N-1
truc1=cbind(truc1,t((rep(i,up))))
truc2=cbind(truc2,t((rep((i+1),(up)))))
}
truc3=t(rep(seq(1,N-1),N-1))
truc4=t(rep(seq(2,N),N-1))
Xmin<-rep(0,Nm1s)
Xmax<-rep(0,Nm1s)
Ymin<-rep(0,Nm1s)
Ymax<-rep(0,Nm1s)
for(i in 1:Nm1s){
Xmin[i]<-X[(truc1[i])]
Xmax[i]<-X[(truc2[i])]
Ymin[i]<-SY[(truc3[i])]
Ymax[i]<-SY[(truc4[i])]
i=i+1
}
S<-(matrix(RES,((N-1)^2)))
MS<-mean(S)
MS<-quantile(S, probs = seq(0, 1, 0.2))
#MS<-c(-500,0,1000,2000,2440)
d=data.frame(Xmin,Xmax,Ymin,Ymax,S)
######################### 4th output ###########################
plotnetrec2 <- ggplot(data=d,aes(Xmin, Ymin, xmin=Xmin, xmax=Xmax,ymin=Ymin, ymax=Ymax)) +
#  geom_point(size=circle.size, pch=21, fill=colors[[4]]) +
#  geom_hline(yintercept=Y.bar, linetype='longdash',color="red") +
#  geom_vline(xintercept=X.bar, linetype='longdash',color="red") +
geom_rect(alpha=0.5, aes(fill=S)) +
#alpha=.1
# S continuous
#scale_fill_gradient2(low = 'red', mid = 'white', high = 'blue', breaks=c(-1,0,1)) +
###################################################################
# scale_fill_gradientn(colours = c(
#   rgb(3,77,0, maxColorValue = 255),
#   "cyan",
#   "white",
#   rgb(255, 255 ,51, maxColorValue = 255),
#   rgb(212,92,22, maxColorValue = 255)),
#                        values = scales::rescale(c(min(S), -0.5, 0, 0.5,  max(S))))+
###################################################################
scale_fill_gradientn(colours = c(
rgb(201,9,9, maxColorValue = 255),
rgb(255, 122 ,243, maxColorValue = 255),
"white",
"cyan",
rgb(14,18,77, maxColorValue = 255)),
limits = c(-max(abs(S)), max(abs(S))))+
#####################################################################
#rescaler=function(S, ...) S, oob=identity) +
#scale_fill_gradientn(colours = c("firebrick4","firebrick1","white","deepskyblue1","deepskyblue4"), breaks=MS) +
#scale_fill_gradientn(colours = c("red","white","deepskyblue3","deepskyblue2","deepskyblue3"), breaks=MS) +
# S discrete
#scale_fill_brewer(palette="Spectral")+
#scale_fill_manual(breaks= quantile(S), values=c('white','cyan','turquoise2','blue2')) +
# xlim(0, 5) +
#  ylim(0, 5) +
xlab("X")+
ylab("Y")
return(list(plotscatter,plotnetrec, plotscatter2, plotnetrec2))
}
graphique <- function(data, show_scatter = F){
graphiques <- graph_plotnetrec(data)
if(show_scatter == T){
return(grid.arrange(graphiques[[1]], graphiques[[2]], graphique[[3]], graphiques[[4]], nrow = 4))
}else{
return(grid.arrange(graphiques[[2]], graphiques[[3]], nrow = 3))
}
}
### Normal case positive
N=200
X <- sort(rnorm(N, 40, 100))
Y <- 1 + 2*X + rnorm(N, 0, 200) # forte variance
data <- data.frame(X,Y)
graphique(data, show_scatter = T)
lm <- lm(Y~X)
plot(lm$residuals ~ X)
graph_plotnetrec <- function(data, type){
circle.size = 2.5
colors = list('red', '#0066CC', '#4BB14B', '#FCE638')
r=0.6
X <- data[,1]
Y <- data[,2]
N <- length(X)
S.bar<-factor(sign((X-mean(X))*(Y-(mean(Y)))))
X.bar <- rep(mean(X),N)
Y.bar <- rep(mean(Y),N)
plotscatter<-  ggplot(data=data, aes(x=X,y=Y)) +
geom_point(size=circle.size, pch=21, fill=colors[[4]]) +
geom_hline(yintercept=Y.bar, linetype='dashed',color="orange",size=0.5) +
geom_vline(xintercept=X.bar, linetype='dashed',color="orange",size=0.5) +
stat_smooth(method="lm", se=FALSE,color="black",size=1)+
ggtitle('Y vs. X Scatterplot') +
xlab("X")+
ylab("Y")
SX<-sort(X,decreasing=FALSE)
SY<-sort(Y,decreasing=FALSE)
N <- length(X)
Nm1s=(N-1)^2
Nmat=N*(N-1)/2
#initialyse
RES<-matrix(0,(N-1),(N-1))
for(i in 1:(N-1))
{
for(j in (i+1):N)
{
TRUC<-rep(0,N-1)
posyi<-which(SY==Y[i])
posyj<-which(SY==Y[j])
min=min(c(posyi,posyj))
max=max(c(posyi,posyj))-1
TRUC<- replace(TRUC,c(min:max),sign((X[i]-X[j])*(Y[i]-Y[j])))
RES[,i:(j-1)]=RES[,i:(j-1)]+TRUC
}
}
truc1<- vector()
truc2<- vector()
for(i in 1:N){
up=N-1
truc1=cbind(truc1,t((rep(i,up))))
truc2=cbind(truc2,t((rep((i+1),(up)))))
}
truc3=t(rep(seq(1,N-1),N-1))
truc4=t(rep(seq(2,N),N-1))
Xmin<-rep(0,Nm1s)
Xmax<-rep(0,Nm1s)
Ymin<-rep(0,Nm1s)
Ymax<-rep(0,Nm1s)
for(i in 1:Nm1s){
Xmin[i]<-X[(truc1[i])]
Xmax[i]<-X[(truc2[i])]
Ymin[i]<-SY[(truc3[i])]
Ymax[i]<-SY[(truc4[i])]
i=i+1
}
S<-(matrix(RES,((N-1)^2)))
MS<-mean(S)
MS<-quantile(S, probs = seq(0, 1, 0.2))
#MS<-c(-500,0,1000,2000,2440)
d=data.frame(Xmin,Xmax,Ymin,Ymax,S)
######################### 4th output ###########################
plotnetrec <- ggplot(data=d,aes(Xmin, Ymin, xmin=Xmin, xmax=Xmax,ymin=Ymin, ymax=Ymax)) +
#  geom_point(size=circle.size, pch=21, fill=colors[[4]]) +
#  geom_hline(yintercept=Y.bar, linetype='longdash',color="red") +
#  geom_vline(xintercept=X.bar, linetype='longdash',color="red") +
geom_rect(alpha=0.5, aes(fill=S)) +
#alpha=.1
# S continuous
#scale_fill_gradient2(low = 'red', mid = 'white', high = 'blue', breaks=c(-1,0,1)) +
###################################################################
# scale_fill_gradientn(colours = c(
#   rgb(3,77,0, maxColorValue = 255),
#   "cyan",
#   "white",
#   rgb(255, 255 ,51, maxColorValue = 255),
#   rgb(212,92,22, maxColorValue = 255)),
#                        values = scales::rescale(c(min(S), -0.5, 0, 0.5,  max(S))))+
###################################################################
scale_fill_gradientn(colours = c(
rgb(201,9,9, maxColorValue = 255),
rgb(255, 122 ,243, maxColorValue = 255),
"white",
"cyan",
rgb(14,18,77, maxColorValue = 255)),
limits = c(-max(abs(S)), max(abs(S))))+
#####################################################################
#rescaler=function(S, ...) S, oob=identity) +
#scale_fill_gradientn(colours = c("firebrick4","firebrick1","white","deepskyblue1","deepskyblue4"), breaks=MS) +
#scale_fill_gradientn(colours = c("red","white","deepskyblue3","deepskyblue2","deepskyblue3"), breaks=MS) +
# S discrete
#scale_fill_brewer(palette="Spectral")+
#scale_fill_manual(breaks= quantile(S), values=c('white','cyan','turquoise2','blue2')) +
# xlim(0, 5) +
#  ylim(0, 5) +
xlab("X")+
ylab("Y")
circle.size = 2.5
colors = list('red', '#0066CC', '#4BB14B', '#FCE638')
r=0.6
reg <- lm(Y~X)
Y <- reg$residuals
N <- length(X)
S.bar<-factor(sign((X-mean(X))*(Y-(mean(Y)))))
X.bar <- rep(mean(X),N)
Y.bar <- rep(mean(Y),N)
plotscatter2<-  ggplot(data=data, aes(x=X,y=Y)) +
geom_point(size=circle.size, pch=21, fill=colors[[4]]) +
geom_hline(yintercept=Y.bar, linetype='dashed',color="orange",size=0.5) +
geom_vline(xintercept=X.bar, linetype='dashed',color="orange",size=0.5) +
stat_smooth(method="lm", se=FALSE,color="black",size=1)+
ggtitle('Y vs. X Scatterplot') +
xlab("X")+
ylab("Y")
SX<-sort(X,decreasing=FALSE)
SY<-sort(Y,decreasing=FALSE)
N <- length(X)
Nm1s=(N-1)^2
Nmat=N*(N-1)/2
#initialyse
RES<-matrix(0,(N-1),(N-1))
for(i in 1:(N-1))
{
for(j in (i+1):N)
{
TRUC<-rep(0,N-1)
posyi<-which(SY==Y[i])
posyj<-which(SY==Y[j])
min=min(c(posyi,posyj))
max=max(c(posyi,posyj))-1
TRUC<- replace(TRUC,c(min:max),sign((X[i]-X[j])*(Y[i]-Y[j])))
RES[,i:(j-1)]=RES[,i:(j-1)]+TRUC
}
}
truc1<- vector()
truc2<- vector()
for(i in 1:N){
up=N-1
truc1=cbind(truc1,t((rep(i,up))))
truc2=cbind(truc2,t((rep((i+1),(up)))))
}
truc3=t(rep(seq(1,N-1),N-1))
truc4=t(rep(seq(2,N),N-1))
Xmin<-rep(0,Nm1s)
Xmax<-rep(0,Nm1s)
Ymin<-rep(0,Nm1s)
Ymax<-rep(0,Nm1s)
for(i in 1:Nm1s){
Xmin[i]<-X[(truc1[i])]
Xmax[i]<-X[(truc2[i])]
Ymin[i]<-SY[(truc3[i])]
Ymax[i]<-SY[(truc4[i])]
i=i+1
}
S<-(matrix(RES,((N-1)^2)))
MS<-mean(S)
MS<-quantile(S, probs = seq(0, 1, 0.2))
#MS<-c(-500,0,1000,2000,2440)
d=data.frame(Xmin,Xmax,Ymin,Ymax,S)
######################### 4th output ###########################
plotnetrec2 <- ggplot(data=d,aes(Xmin, Ymin, xmin=Xmin, xmax=Xmax,ymin=Ymin, ymax=Ymax)) +
#  geom_point(size=circle.size, pch=21, fill=colors[[4]]) +
#  geom_hline(yintercept=Y.bar, linetype='longdash',color="red") +
#  geom_vline(xintercept=X.bar, linetype='longdash',color="red") +
geom_rect(alpha=0.5, aes(fill=S)) +
#alpha=.1
# S continuous
#scale_fill_gradient2(low = 'red', mid = 'white', high = 'blue', breaks=c(-1,0,1)) +
###################################################################
# scale_fill_gradientn(colours = c(
#   rgb(3,77,0, maxColorValue = 255),
#   "cyan",
#   "white",
#   rgb(255, 255 ,51, maxColorValue = 255),
#   rgb(212,92,22, maxColorValue = 255)),
#                        values = scales::rescale(c(min(S), -0.5, 0, 0.5,  max(S))))+
###################################################################
scale_fill_gradientn(colours = c(
rgb(201,9,9, maxColorValue = 255),
rgb(255, 122 ,243, maxColorValue = 255),
"white",
"cyan",
rgb(14,18,77, maxColorValue = 255)),
limits = c(-max(abs(S)), max(abs(S))))+
#####################################################################
#rescaler=function(S, ...) S, oob=identity) +
#scale_fill_gradientn(colours = c("firebrick4","firebrick1","white","deepskyblue1","deepskyblue4"), breaks=MS) +
#scale_fill_gradientn(colours = c("red","white","deepskyblue3","deepskyblue2","deepskyblue3"), breaks=MS) +
# S discrete
#scale_fill_brewer(palette="Spectral")+
#scale_fill_manual(breaks= quantile(S), values=c('white','cyan','turquoise2','blue2')) +
# xlim(0, 5) +
#  ylim(0, 5) +
xlab("X")+
ylab("Y")
return(list(plotscatter,plotnetrec, plotscatter2, plotnetrec2))
}
graphique(data, show_scatter = T)
graphique <- function(data, show_scatter = F){
graphiques <- graph_plotnetrec(data)
if(show_scatter == T){
return(grid.arrange(graphiques[[1]], graphiques[[2]], graphiques[[3]], graphiques[[4]], nrow = 4))
}else{
return(grid.arrange(graphiques[[2]], graphiques[[3]], nrow = 3))
}
}
### Normal case positive
N=200
X <- sort(rnorm(N, 40, 100))
Y <- 1 + 2*X + rnorm(N, 0, 200) # forte variance
data <- data.frame(X,Y)
graphique(data, show_scatter = T)
```{r, fig.width=13, fig.height=10}
graphique(data, show_scatter = T)
plot(lm$residuals ~ X)
### Normal case positive
N=200
X <- sort(rnorm(N, 40, 100))
Y <- 1 + 2*X + rnorm(N, 0, 200) # forte variance
data <- data.frame(X,Y)
lm <- lm(Y~X)
plot(lm$residuals ~ X)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(tidyverse)
library(tidyr)
library(DT)
data <- readRDS('data_jeux.rds')
View(data)
data$Publisher <- as.factor(data$Publisher)
fct_count(data$Publisher, sort = T)[1:100]
fct_count(data$Publisher, sort = T)[1:100?]
fct_count(data$Publisher, sort = T)[1:100,]
fct_count(data$Publisher, sort = T)[1:1000,]
fct_count(data$Publisher, sort = T)
fct_count(data$Publisher, sort = T)[1:250]
fct_count(data$Publisher, sort = T)[1:250,]
truc = fct_count(data$Publisher, sort = T)[1:250,]
truc = fct_count(data$Publisher, sort = T)[1:250,1]
truc
write.csv(truc,"C:\\Users\\Lucas\\Documents\\M2\\S2\\Big data\\Lucas\\data\\publisher_to_scrap.csv", row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
data <- readRDS('data_jeux.rds')
library(reticulate)
library(tidyverse)
library(tidyr)
library(DT)
data$Publisher <- as.factor(data$Publisher)
data <- readRDS('data_jeux.rds')
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(tidyverse)
library(tidyr)
library(DT)
data <- readRDS('data_jeux.rds')
data$Publisher <- as.factor(data$Publisher)
truc = fct_count(data$Publisher, sort = T)[1:3500,1]
truc
write.csv(truc,"C:\\Users\\Lucas\\Documents\\M2\\S2\\Big data\\Lucas\\data\\publisher_to_scrap.csv", row.names = FALSE)
