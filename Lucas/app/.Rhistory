shiny::runApp('app')
df %>%
filter(Year == "1989") %>%
select(everything()) %>%
summarize(fct_count(Publisher, sort = T)[1:10,]) %>%
ggplot() +
aes(x=fct_reorder(f, n), y = n) +
geom_col() +
coord_flip()
library(tidyverse)
library(tidyr)
df <- read_csv('vgsales.csv')
df <- df  %>%
mutate(Platform = as.factor(Platform)) %>%
mutate(Year = as.factor(Year)) %>%
mutate(Genre = as.factor(Genre)) %>%
mutate(Publisher = as.factor(Publisher))
fct_count(df$Genre, sort = T)
fct_count(df$Publisher, sort = T, prop = T)[1:10,]
fct_count(df$Platform, sort = T)
### Graphique représentant le nombre de jeu sortit pour le top 10 des 'publisher' dans une année
### Ce graphique serait un peu plus pertinent si on enlevé le doublons name
df %>%
filter(Year == "1989") %>%
select(everything()) %>%
summarize(fct_count(Publisher, sort = T)[1:10,]) %>%
ggplot() +
aes(x=fct_reorder(f, n), y = n) +
geom_col() +
coord_flip()
### Graphique représentant le nombre de jeu sortit pour le top 10 des 'publisher' dans une année
### Ce graphique serait un peu plus pertinent si on enlevé le doublons name
df %>%
filter(Year == "1989") %>%
select(everything()) %>%
summarize(fct_count(Publisher, sort = T)) %>%
slice(1:10) %>%
ggplot() +
aes(x=fct_reorder(f, n), y = n) +
geom_col() +
coord_flip()
slice(1:min(10, lenght()) %>%
filter(Year == "1989") %>%
geom_col() +
### Graphique représentant le nombre de jeu sortit pour le top 10 des 'publisher' dans une année
### Ce graphique serait un peu plus pertinent si on enlevé le doublons name
df %>%
filter(Year == "1989") %>%
select(everything()) %>%
summarize(fct_count(Publisher, sort = T)) %>%
slice(1:min(10, lenght())) %>%
ggplot() +
aes(x=fct_reorder(f, n), y = n) +
geom_col() +
coord_flip()
### Graphique représentant le nombre de jeu sortit pour le top 10 des 'publisher' dans une année
### Ce graphique serait un peu plus pertinent si on enlevé le doublons name
df %>%
filter(Year == "1989") %>%
select(everything()) %>%
summarize(fct_count(Publisher, sort = T)) %>%
slice(1:min(10, lenght())) %>%
ggplot() +
aes(x=fct_reorder(f, n), y = n) +
geom_col() +
coord_flip()
### Graphique représentant le nombre de jeu sortit pour le top 10 des 'publisher' dans une année
### Ce graphique serait un peu plus pertinent si on enlevé le doublons name
df %>%
filter(Year == "1989") %>%
select(everything()) %>%
summarize(fct_count(Publisher, sort = T)) %>%
slice(1:min(10, lenght())) %>%
ggplot() +
aes(x=fct_reorder(f, n), y = n) +
geom_col() +
coord_flip()
### Graphique représentant le nombre de jeu sortit pour le top 10 des 'publisher' dans une année
### Ce graphique serait un peu plus pertinent si on enlevé le doublons name
df %>%
filter(Year == "1989") %>%
select(everything()) %>%
summarize(fct_count(Publisher, sort = T)) %>%
slice(1:min(10, length())) %>%
ggplot() +
aes(x=fct_reorder(f, n), y = n) +
geom_col() +
coord_flip()
### Graphique représentant le nombre de jeu sortit pour le top 10 des 'publisher' dans une année
### Ce graphique serait un peu plus pertinent si on enlevé le doublons name
df %>%
filter(Year == "1989") %>%
select(everything()) %>%
summarize(fct_count(Publisher, sort = T)) %>%
slice(1:min(10)) %>%
ggplot() +
aes(x=fct_reorder(f, n), y = n) +
geom_col() +
coord_flip()
### Graphique représentant le nombre de jeu sortit pour le top 10 des 'publisher' dans une année
### Ce graphique serait un peu plus pertinent si on enlevé le doublons name
df %>%
filter(Year == "1989") %>%
select(everything()) %>%
summarize(fct_count(Publisher, sort = T)) %>%
slice(1:10) %>%
ggplot() +
aes(x=fct_reorder(f, n), y = n) +
geom_col() +
coord_flip()
runApp('app')
df %>%
filter(Year == input$years) %>%
select(everything()) %>%
summarize(fct_count(Publisher, sort = T)[1:10,]) %>%
slice(1:10)
runApp('app')
runApp('app')
runApp('app')
runApp('app')
### Graphique représentant le nombre de jeu sortit pour le top 10 des 'publisher' dans une année
### Ce graphique serait un peu plus pertinent si on enlevé le doublons name
df %>%
filter(Year == "1989") %>%
select(everything()) %>%
summarize(fct_count("Publisher", sort = T)) %>%
slice(1:10) %>%
ggplot() +
aes(x=fct_reorder(f, n), y = n) +
geom_col() +
coord_flip()
runApp('app')
runApp('app')
runApp('app')
runApp('app')
df %>%
filter(Year == "1989") %>%
select(everything()) %>%
summarize(fct_count(Publisher, sort = T)) %>%
slice(1:10
)
test <- df %>%
filter(Year == "1989") %>%
select(everything()) %>%
summarize(fct_count(Publisher, sort = T)) %>%
slice(1:10)
test['publisher']
test['Publisher']
test
fct_count(df$Genre, sort = T)
fct_count(df$Publisher, sort = T, prop = T)[1:10,]
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('~/M2/S2/Big data/VG_Shiny/Lucas/app')
data_jeux_2 <- readRDS("~/M2/S2/Big data/VG_Shiny/Lucas/recherche_app/data_jeux_2.rds")
setwd("~/M2/S2/Big data/VG_Shiny/Lucas/app")
df2 <- readRDS('data_jeux_2.rds')
install.packages('shinythemes')
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Video Games"),
## Page
navbarPage("Page",
tabPanel("Graphiques",
tabsetPanel(
tabPanel("Nombre",
sidebarLayout(
sidebarPanel(
sliderInput("years",
"Annee :",
min = 1980,
max = 2017,
value = 2016)
,
radioButtons("var",
label = h3("Radio buttons"),
choices = list("Publisher" = "Publisher", "Genre" = "Genre"),
selected = "Genre")
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("Hist")
)
)
),
tabPanel("Sales",
sidebarLayout(
sidebarPanel(
sliderInput("years2",
"Annee :",
min = 1980,
max = 2017,
value = 2016)
,
radioButtons("var2",
label = h3("Radio buttons"),
choices = list(
"Publisher" = "Publisher",
"Genre" = "Genre",
"Video Games" = "Name",
"Platform" = "Platform"
),
selected = "Name")
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("SalesHist")
)
)),
tabPanel("I have no idea", "ODOR")
)
),
tabPanel("Recommandation",
sidebarLayout(
sidebarPanel(
sliderInput("years3",
"Annee :",
min = 1980,
max = 2017,
value = c(1980,2017)),
selectInput("plateform1", label = h3("Plateform"),
choices = c("--", as.list(levels(df$Platform))),
selected = "--"),
selectInput("genre1", label = h3("Type"),
choices = c("--", as.list(levels(df$Genre))),
selected = "--"),
),
mainPanel(
tableOutput("Tablo")
)
)
)
),
theme = shinythemes::shinytheme('superhero')
)
runApp()
df <- read_csv('vgsales.csv')
knitr::opts_chunk$set(echo = TRUE)
data %>%
mutate(choix = data %>% select(c(Action, Puzzle)) %>% rowSums()) %>%
filter(choix > 0)
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
library(tidyverse)
library(tidyr)
library(DT)
data <- readRDS('data_jeux.rds')
class(data)
data <- as_tibble(data)
class(data)
data['Action']
data[c('Action', 'Puzzle')]
data[,c(data$Action, data$Puzzle)]
data %>%
mutate(choix = data[c('Action', 'Puzzle')] %>% rowSums()) %>%
filter(choix > 0)
data %>%
filter(data[c('Action', 'Puzzle')] %>% rowSums() > 0)
tablo <- data
tablo %>%
filter(data[c('Action', 'Puzzle')] %>% rowSums() > 0)
tablo <- data[1:100000]
tablo <- data[1:100000,]
tablo %>%
filter(data[c('Action', 'Puzzle')] %>% rowSums() > 0)
tablo %>%
filter(tablo[c('Action', 'Puzzle')] %>% rowSums() > 0)
shiny::runApp()
View(data)
data$Description
data$Description[1:10,]
data$Description[1:10]
print(data$Description[1])
paste(data$Description[1])
cat(data$Description[1])
runApp()
