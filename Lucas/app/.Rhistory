eAvg_input <- df %>%
select(starts_with("e")) %>%
colMeans()
eAvg_input <- df %>%
select(starts_with("e")) %>%
colMeans() %>%
summarise()
eAvg_input <- df %>%
select(starts_with("e")) %>%
colMeans() %>%
eAvg_input
eAvg_input <- df %>%
select(starts_with("e")) %>%
colMeans() %>%
eAvg_input
eAvg_input <- df %>%
select(starts_with("e")) %>%
colMeans() %>%
eAvg_input
eAvg_input <- df %>%
select(starts_with("e")) %>%
colMeans()
eAvg_input
eAvg <- mean(eAvg_input)
eAvg
df %>%
select(starts_with("e")) %>%
pivot_longer(cols = starts_with("e"),
names_to = "input",
values_to = "elasticite") %>%
mutate(input = fct_recode(input,
"Capital" = "eCap",
"Travail" = "eLab",
"Consommations intermédiaires" = "eMat")) %>%
ggplot(aes(x = elasticite,
color = input,
fill = input)) +
geom_histogram(bins = 30,
alpha = .8) +
scale_color_brewer(palette = "Set2") +
scale_fill_brewer(palette = "Set2") +
facet_grid(~ input) +
labs(title = TeX("Répartition des élasticités estimées des 3 facteurs de production $\\hat{\\epsilon}_k$"),
x = TeX("$\\hat{\\epsilon}_k$"),
y = "Fréquence") +
theme(legend.position = "none",
strip.text.x = element_text(size = 10),
axis.title = element_text(size = 10),
title = element_text(size = 10))
Distribution des élasticités estimées $\\hat{\\epsilon}$"),
x = TeX("$\\hat{\\epsilon}$"),
y = "Densité") +
theme(axis.title = element_text(size = 10),
title = element_text(size = 10))
df %>%
select(starts_with("e")) %>%
pivot_longer(cols = starts_with("e"),
names_to = "input",
values_to = "elasticite") %>%
mutate(input = fct_recode(input,
"Capital" = "eCap",
"Travail" = "eLab",
"Consommations intermédiaires" = "eMat")) %>%
ggplot(aes(x = elasticite,
color = input,
fill = input)) +
geom_histogram(bins = 30,
alpha = .8) +
scale_color_brewer(palette = "Set2") +
scale_fill_brewer(palette = "Set2") +
facet_grid(~ input) +
labs(title = TeX("Répartition des élasticités estimées des 3 facteurs de production $\\hat{\\epsilon}_k$"),
x = TeX("$\\hat{\\epsilon}_k$"),
y = "Fréquence") +
theme(legend.position = "none",
strip.text.x = element_text(size = 10),
axis.title = element_text(size = 10),
title = element_text(size = 10))
df %>%
select(starts_with("e")) %>%
unlist() %>%
as.data.frame(row.names = 1:length(.) %>%
as.character()) %>%
ggplot(aes(x = `.`)) +
geom_histogram(aes(y = ..density..),
bins = 30,
alpha = .8,
fill = "grey",
color = "grey") +
geom_density(color = "black",
size = .7,
linetype = "dashed") +
labs(title = TeX("Distribution des élasticités estimées $\\hat{\\epsilon}$"),
x = TeX("$\\hat{\\epsilon}$"),
y = "Densité") +
theme(axis.title = element_text(size = 10),
title = element_text(size = 10))
df <- df %>%
mutate(eCap = (coeff["qCap"] + coeff["qCap:qLab"] * qLab + coeff["qCap:qMat"] * qMat) * qCap / qOut.fit,
eLab = (coeff["qLab"] + coeff["qCap:qLab"] * qCap + coeff["qLab:qMat"] * qMat) * qLab / qOut.fit,
eMat = (coeff["qMat"] + coeff["qLab:qMat"] * qLab + coeff["qCap:qMat"] * qCap) * qMat / qOut.fit)
renvoie_student <- function(input){
e <- df %>%
pull(paste0("e", input))
e.fit <- df %>%
pull(paste0("e", input, ".fit"))
test <- t.test(x = e,
y = e.fit,
paired = T)
res <- list("statistic" = test$statistic,
"df" = test$parameter,
"pvalue" = test$p.value,
"diff" = test$estimate)
return(res)
}
inputs <- c("Cap", "Lab", "Mat")
test.res <- lapply(inputs,
renvoie_student) %>%
bind_rows() %>%
as.data.frame()
rownames(test.res) <- inputs
test.res %>%
mykable(titre = "Résultats du test de Student de comparaison entre $\\hat{\\varepsilon}_{k, q_{obs}}$ et $\\hat{\\varepsilon}_{k, \\hat{q}}$")
df <- df %>%
mutate(eCap = (coeff["qCap"] + coeff["qCap:qLab"] * qLab + coeff["qCap:qMat"] * qMat) * qCap / qOut,
eLab = (coeff["qLab"] + coeff["qCap:qLab"] * qCap + coeff["qLab:qMat"] * qMat) * qLab / qOut,
eMat = (coeff["qMat"] + coeff["qLab:qMat"] * qLab + coeff["qCap:qMat"] * qCap) * qMat / qOut)
df <- df %>%
mutate(eCap.fit = (coeff["qCap"] + coeff["qCap:qLab"] * qLab + coeff["qCap:qMat"] * qMat) * qCap / qOut.fit,
eLab.fit = (coeff["qLab"] + coeff["qCap:qLab"] * qCap + coeff["qLab:qMat"] * qMat) * qLab / qOut.fit,
eMat.fit = (coeff["qMat"] + coeff["qLab:qMat"] * qLab + coeff["qCap:qMat"] * qCap) * qMat / qOut.fit)
renvoie_student <- function(input){
e <- df %>%
pull(paste0("e", input))
e.fit <- df %>%
pull(paste0("e", input, ".fit"))
test <- t.test(x = e,
y = e.fit,
paired = T)
res <- list("statistic" = test$statistic,
"df" = test$parameter,
"pvalue" = test$p.value,
"diff" = test$estimate)
return(res)
}
inputs <- c("Cap", "Lab", "Mat")
test.res <- lapply(inputs,
renvoie_student) %>%
bind_rows() %>%
as.data.frame()
rownames(test.res) <- inputs
test.res %>%
mykable(titre = "Résultats du test de Student de comparaison entre $\\hat{\\varepsilon}_{k, q_{obs}}$ et $\\hat{\\varepsilon}_{k, \\hat{q}}$")
source("packages.R")
test.res %>%
mykable(titre = "Résultats du test de Student de comparaison entre $\\hat{\\varepsilon}_{k, q_{obs}}$ et $\\hat{\\varepsilon}_{k, \\hat{q}}$")
source("fonctions.R",
encoding="utf-8")
source("fonctions.R",
encoding="utf-8")
test.res %>%
mykable(titre = "Résultats du test de Student de comparaison entre $\\hat{\\varepsilon}_{k, q_{obs}}$ et $\\hat{\\varepsilon}_{k, \\hat{q}}$")
test.res
df <- df %>%
mutate(
TMST_CL = (coeff["qCap"] + coeff["qCap:qLab"] * qLab + coeff["qCap:qMat"] * qMat) / (coeff["qLab"] + coeff["qCap:qLab"] * qCap + coeff["qLab:qMat"] * qMat),
TMST_LM = (coeff["qLab"] + coeff["qCap:qLab"] * qCap + coeff["qLab:qMat"] * qMat) / (coeff["qMat"] + coeff["qLab:qMat"] * qLab + coeff["qCap:qMat"] * qCap),
TMST_CM = (coeff["qCap"] + coeff["qCap:qLab"] * qLab + coeff["qCap:qMat"] * qMat) / (coeff["qMat"] + coeff["qLab:qMat"] * qLab + coeff["qCap:qMat"] * qCap)
)
AvgTmst <- df %>%
select(starts_with("TMST")) %>%
colMeans()
AvgTmst
df %>%
select(starts_with("TMST")) %>%
unlist() %>%
as.data.frame(row.names = 1:length(.) %>%
as.character()) %>%
ggplot(aes(x = `.`)) +
geom_histogram(aes(y = ..density..),
bins = 30,
alpha = .8,
fill = "grey",
color = "grey") +
geom_density(color = "black",
size = .7,
linetype = "dashed") +
labs(title = TeX("Distribution des TMST $\\hat{\\epsilon}$"),
x = TeX("$\\hat{\\epsilon}$"),
y = "Densité") +
theme(axis.title = element_text(size = 10),
title = element_text(size = 10))
df %>%
select(starts_with("tmst")) %>%
pivot_longer(cols = starts_with("e"),
names_to = "input",
values_to = "elasticite") %>%
mutate(input = fct_recode(input,
"Capital" = "eCap",
"Travail" = "eLab",
"Consommations intermédiaires" = "eMat")) %>%
ggplot(aes(x = elasticite,
color = input,
fill = input)) +
geom_histogram(bins = 30,
alpha = .8) +
scale_color_brewer(palette = "Set2") +
scale_fill_brewer(palette = "Set2") +
facet_grid(~ input) +
labs(title = TeX("Répartition des élasticités estimées des 3 facteurs de production $\\hat{\\epsilon}_k$"),
x = TeX("$\\hat{\\epsilon}_k$"),
y = "Fréquence") +
theme(legend.position = "none",
strip.text.x = element_text(size = 10),
axis.title = element_text(size = 10),
title = element_text(size = 10))
df %>%
select(starts_with("TMST")) %>%
pivot_longer(cols = starts_with("e"),
names_to = "input",
values_to = "elasticite") %>%
mutate(input = fct_recode(input,
"Capital" = "eCap",
"Travail" = "eLab",
"Consommations intermédiaires" = "eMat")) %>%
ggplot(aes(x = elasticite,
color = input,
fill = input)) +
geom_histogram(bins = 30,
alpha = .8) +
scale_color_brewer(palette = "Set2") +
scale_fill_brewer(palette = "Set2") +
facet_grid(~ input) +
labs(title = TeX("Répartition des élasticités estimées des 3 facteurs de production $\\hat{\\epsilon}_k$"),
x = TeX("$\\hat{\\epsilon}_k$"),
y = "Fréquence") +
theme(legend.position = "none",
strip.text.x = element_text(size = 10),
axis.title = element_text(size = 10),
title = element_text(size = 10))
View(df)
df %>%
select(starts_with("TMST")) %>%
pivot_longer(cols = starts_with("TMST"),
names_to = "input",
values_to = "elasticite") %>%
mutate(input = fct_recode(input,
"Capital" = "eCap",
"Travail" = "eLab",
"Consommations intermédiaires" = "eMat")) %>%
ggplot(aes(x = elasticite,
color = input,
fill = input)) +
geom_histogram(bins = 30,
alpha = .8) +
scale_color_brewer(palette = "Set2") +
scale_fill_brewer(palette = "Set2") +
facet_grid(~ input) +
labs(title = TeX("Répartition des élasticités estimées des 3 facteurs de production $\\hat{\\epsilon}_k$"),
x = TeX("$\\hat{\\epsilon}_k$"),
y = "Fréquence") +
theme(legend.position = "none",
strip.text.x = element_text(size = 10),
axis.title = element_text(size = 10),
title = element_text(size = 10))
df <- df %>%
mutate(
TMST_CL = - (coeff["qCap"] + coeff["qCap:qLab"] * qLab + coeff["qCap:qMat"] * qMat) / (coeff["qLab"] + coeff["qCap:qLab"] * qCap + coeff["qLab:qMat"] * qMat),
TMST_LM = - (coeff["qLab"] + coeff["qCap:qLab"] * qCap + coeff["qLab:qMat"] * qMat) / (coeff["qMat"] + coeff["qLab:qMat"] * qLab + coeff["qCap:qMat"] * qCap),
TMST_CM = - (coeff["qCap"] + coeff["qCap:qLab"] * qLab + coeff["qCap:qMat"] * qMat) / (coeff["qMat"] + coeff["qLab:qMat"] * qLab + coeff["qCap:qMat"] * qCap)
)
AvgTmst <- df %>%
select(starts_with("TMST")) %>%
colMeans()
df %>%
select(starts_with("TMST")) %>%
pivot_longer(cols = starts_with("TMST"),
names_to = "input",
values_to = "elasticite") %>%
mutate(input = fct_recode(input,
"Capital" = "eCap",
"Travail" = "eLab",
"Consommations intermédiaires" = "eMat")) %>%
ggplot(aes(x = elasticite,
color = input,
fill = input)) +
geom_histogram(bins = 30,
alpha = .8) +
scale_color_brewer(palette = "Set2") +
scale_fill_brewer(palette = "Set2") +
facet_grid(~ input) +
labs(title = TeX("Répartition des élasticités estimées des 3 facteurs de production $\\hat{\\epsilon}_k$"),
x = TeX("$\\hat{\\epsilon}_k$"),
y = "Fréquence") +
theme(legend.position = "none",
strip.text.x = element_text(size = 10),
axis.title = element_text(size = 10),
title = element_text(size = 10))
df %>%
select(starts_with("TMST")) %>%
pivot_longer(cols = starts_with("TMST"),
names_to = "input",
values_to = "elasticite") %>%
mutate(input = fct_recode(input,
"Capital" = "eCap",
"Travail" = "eLab",
"Consommations intermédiaires" = "eMat")) %>%
ggplot(aes(x = elasticite,
color = input,
fill = input)) +
geom_histogram(bins = 30,
alpha = .8) +
scale_color_brewer(palette = "Set2") +
scale_fill_brewer(palette = "Set2") +
facet_grid(~ input) +
labs(title = TeX("Répartition des TMST observés des 3 facteurs de production"),
x = TeX("$\\TMST_{I,J}$"),
y = "Fréquence") +
theme(legend.position = "none",
strip.text.x = element_text(size = 10),
axis.title = element_text(size = 10),
title = element_text(size = 10))
shiny::runApp('~/M2/S2/Big data/Shiny_VG/Lucas/app')
runApp('~/M2/S2/Big data/Shiny_VG/Lucas/app')
runApp('~/M2/S2/Big data/Shiny_VG/Lucas/app')
min(as.numeric(as.character(Year)))
df %>%
filter(Platform == "PS3") %>%
select('Year')
df %>%
filter(Platform == "PS3") %>%
select('Year')
df %>%
filter(Platform == "PS3")
library(shiny)
library(tidyverse)
library(tidyr)
#### La base de données comporte plusieurs soucis :
#### * Aprés 2016 elle est peu fiable
#### * Les jeux sont séparés en platform. Càd que nous avons des duplications de jeux. A rassembler pour potentiel usage
df <- read_csv('vgsales.csv')
df <- df  %>%
mutate(Platform = as.factor(Platform)) %>%
mutate(Year = as.factor(Year)) %>%
mutate(Genre = as.factor(Genre)) %>%
mutate(Publisher = as.factor(Publisher))
library(shiny)
library(tidyverse)
library(tidyr)
#### La base de données comporte plusieurs soucis :
#### * Aprés 2016 elle est peu fiable
#### * Les jeux sont séparés en platform. Càd que nous avons des duplications de jeux. A rassembler pour potentiel usage
df <- read_csv('vgsales.csv')
df <- df  %>%
mutate(Platform = as.factor(Platform)) %>%
mutate(Year = as.factor(Year)) %>%
mutate(Genre = as.factor(Genre)) %>%
mutate(Publisher = as.factor(Publisher))
setwd("~/M2/S2/Big data/Shiny_VG/Lucas/app")
library(shiny)
library(tidyverse)
library(tidyr)
#### La base de données comporte plusieurs soucis :
#### * Aprés 2016 elle est peu fiable
#### * Les jeux sont séparés en platform. Càd que nous avons des duplications de jeux. A rassembler pour potentiel usage
df <- read_csv('vgsales.csv')
df <- df  %>%
mutate(Platform = as.factor(Platform)) %>%
mutate(Year = as.factor(Year)) %>%
mutate(Genre = as.factor(Genre)) %>%
mutate(Publisher = as.factor(Publisher))
min(as.numeric(as.character(Year)))
df %>%
filter(Platform == "PS3") %>%
select('Year')
df %>%
filter(Platform == "PS3") %>%
select('Year') %>%
min(as.numeric(as.character(Year)))
df %>%
filter(Platform == "PS3") %>%
select('Year') %>%
min(as.numeric(as.character('Year')))
df %>%
filter(Platform == "PS3") %>%
min(as.numeric(as.character(Year)))
df %>%
filter(Platform == "PS3")
df %>%
filter(Platform == "PS3") %>%
select(Year)
df %>%
filter(Platform == "PS3") %>%
select(Year) %>% min()
df %>%
filter(Platform == "PS3") %>%
select(Year) %>% as.character()
df %>%
filter(Platform == "PS3") %>%
select(Year) %>% as.character() %>% as.numeric5°
df %>%
filter(Platform == "PS3") %>%
select(Year) %>% as.character() %>% as.numeric()
df %>%
filter(Platform == "PS3") %>%
select(Year) %>%
as.character() %>%
as.numeric()
df
df %>%
filter(Platform == "PS3") %>%
select(Year) %>%
as.character()
df %>%
filter(Platform == "PS3") %>%
select(Year)
min(df$Year[df$Platform=="PS3"])
as.numeric(df$Year[df$Platform=="PS3"])
min(as.numeric(as.character(df$Year[df$Platform=="PS3"])))
as.numeric(as.character(df$Year[df$Platform=="PS3"]))
df$Year[df$Platform=="PS3"])
df$Year[df$Platform=="PS3"]
View(df)
df <- read_csv('vgsales.csv')
df <- df  %>%
mutate(Platform = as.factor(Platform)) %>%
mutate(Year = numeric(Year))
df <- read_csv('vgsales.csv')
df <- df  %>%
mutate(Platform = as.factor(Platform)) %>%
mutate(Year = as.numeric(Year)) %>%
mutate(Genre = as.factor(Genre)) %>%
mutate(Publisher = as.factor(Publisher))
df
sum(is.na(df$Year))
df <- df  %>%
mutate(Platform = as.factor(Platform)) %>%
mutate(Year = as.factor(Year)) %>%
mutate(Genre = as.factor(Genre)) %>%
mutate(Publisher = as.factor(Publisher))
df <- read_csv('vgsales.csv')
df <- read_csv('vgsales.csv')
min(as.numeric(as.character(df$Year)))
as.numeric(as.character(df$Year)
)
View(df)
min(as.numeric(as.character(df$Year[df$Platform=="PS3"])))
min(as.numeric(as.character(na.omit(df$Year[df$Platform=="PS3"]))))
df %>%
filter(Platform == "PS3") %>%
select(Year)
df %>%
filter(Platform == "PS3") %>%
na.omit()
df %>%
filter(Platform == "PS3") %>%
na.omit() %>%
min(as.numeric(as.character((Year[Platform=="PS3"]))))
df %>%
filter(Platform == "PS3") %>%
na.omit() %>%
summarize(min(as.numeric(as.character(Year[Platform=="PS3"]))))
df %>%
filter(Platform == "PS3") %>%
na.omit() %>%
#min(as.numeric(as.character(Year[Platform=="PS3"])))
min(as.numeric(as.character(na.omit(df$Year[df$Platform=="PS3"]))))
df %>%
filter(Platform == "PS3") %>%
na.omit()
df %>%
filter(Platform == "PS3") %>%
#min(as.numeric(as.character(Year[Platform=="PS3"])))
min(as.numeric(as.character(na.omit(df$Year[df$Platform=="PS3"]))))
df %>%
filter(Platform == "PS3")
df %>%
na.omit()
sum(is.na(df$Year))
df %>%
filter(Platform == "PS3") %>%
as.numeric(Year)
df %>%
filter(Platform == "PS3")
df %>%
filter(Platform == "PS3") %>%
as.numeric(Rank)
df %>%
filter(Platform == "PS3") %>%
as_numeric(Rank)
df %>%
filter(Platform == "PS3") %>%
asnumeric(Rank)
df %>%
filter(Platform == "PS3") %>%
as.numeric(Rank)
df %>%
as.numeric(Rank)
as.numeric(as.character(Year[Platform=="PS3"]))
df %>%
filter(Platform == "PS3") %>%
as.numeric(as.character(Year[Platform=="PS3"]))
df %>%
filter(Platform == "PS3") %>%
as.numeric(as.character(df$Year[df$Platform=="PS3"]))
df %>%
filter(Platform == "PS3") %>%
as.numeric(as.character(df$Year[df$Platform=="PS3"]))
min(na.omit(as.numeric(as.character(df$Year[df$Platform=="PS3"]))))
max(na.omit(as.numeric(as.character(df$Year[df$Platform=="PS3"]))))
min(na.omit(as.numeric(as.character(df$Year[df$Platform=="PS3"]))))
runApp()
